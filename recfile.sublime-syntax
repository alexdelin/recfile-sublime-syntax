%YAML 1.2
---
name: Recfile
file_extensions:
  - rec
  - recfile
scope: text.recfile

contexts:
  main:
    - match: '#.+'
      scope: comment.recfile

    - match: '(%)(mandatory|unique|auto|sort|prohibit|allowed|key|encrypted): (.+)'
      captures:
        1: constant.numeric.rec-config.recfile
        2: keyword.record-set-property.recfile
        3: entity.name.function.field-name.recfile

    - match: '(%)(rec): (\w+)( .+)?'
      captures:
        1: constant.numeric.rec-config.recfile
        2: keyword.record-type.recfile
        3: constant.language.record-type-name.recfile
        4: comment.rec-type-link.recfile

    - match: '(%)(typedef): (\w+) '
      captures:
        1: constant.numeric.rec-config.recfile
        2: keyword.type-def-keyword.recfile
        3: variable.function.custom-type.recfile
      push: typedef

    - match: '(%)(type): ([\w,]+) '
      captures:
        1: constant.numeric.rec-config.recfile
        2: keyword.type-keyword.recfile
        3: entity.name.function.field-name.recfile
      push: typedef

    - match: '(%)(doc): '
      captures:
        1: constant.numeric.rec-config.recfile
        2: keyword.doc-keyword.recfile
      push: documentation

    - match: '(%)(size): ([<>=]+)?( )?((0x)?[\dA-F]+)'
      captures:
        1: constant.numeric.rec-config.recfile
        2: keyword.size-keyword.recfile
        3: constant.language.size-restriction.recfile
        5: constant.numeric.size-value.recfile

    - match: '^(\w+):'
      scope: entity.name.function.custom-type.recfile

    - match: '^(\+ )(\w+)'
      captures:
        1: comment.recfile

    - match: '.*'
      scope: main.recfile

  documentation:

    - match: '(\+ )([\w ]+)'
      captures:
        1: comment.recfile
        2: string.documentation.recfile

    - match: '[\w ]+'
      scope: string.documentation.recfile

    - match: '^(?!\+ )'
      set: main

  typedef:
    - match: '(int\b|real\b|bool\b|line\b|date\b|uuid\b)'
      scope: storage.type.recfile
      pop: true

    - match: '(size) (0x[\dA-F]+|\d+)'
      captures:
        1: storage.type.recfile
        2: constant.numeric.recfile
      pop: true

    - match: '(range\b)'
      captures:
        1: storage.type.recfile
      push: range

    - match: '(enum\b)'
      captures:
        1: storage.type.enum-keyword.recfile
      push: enum

    - match: '(regexp) .(.+).'
      captures:
        1: storage.type.recfile
        2: string.recfile
      pop: true

    - match: '\w+'
      scope: variable.function.recfile
      pop: true

    - match: '.+'
      scope: string.recfile
      pop: true

  range:

    - match: ' (MIN|-?0x[\dA-F]+|-?\d+)( )?(MAX|-?0x[\dA-F]+|-?\d+)?'
      captures:
        1: constant.numeric.recfile
        3: constant.numeric.recfile
      set: main

    - match: '.*'
      set: main

  enum:

    - match: '(\+ )([\w ]+)'
      captures:
        1: comment.recfile
        2: string.enum-content.recfile

    - match: '[\w ]+'
      scope: string.enum-content.recfile

    - match: '\('
      scope: comment.recfile
      push: inline-comment

    - match: '^(?!\+ )'
      set: main

  inline-comment:

    - match: '[^\)]*'
      scope: comment.recfile

    - match: '\)'
      scope: comment.recfile
      pop: true
